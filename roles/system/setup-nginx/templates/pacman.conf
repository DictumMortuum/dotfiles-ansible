server {
  listen      80;
  listen      [::]:80;
  server_name "{{ mirror.type }}.archlinux.{{ tld }}";
  root        "{{ path_storage }}/apps/pacman/{{ mirror.type }}";
  autoindex   on;
  allow       192.168.1.0/24;
  deny        all;

  # Requests for package db, signature files and files db should redirect upstream without caching
  location ~ \.(db|sig|files)$ {
    proxy_pass http://mirrors_{{ mirror.type }}$request_uri;
  }

  # Requests for actual packages should be served directly from cache if available.
  #   If not available, retrieve and save the package from an upstream mirror.
  location ~ \.tar\.(xz|zst)$ {
    try_files $uri @pkg_mirror;
  }

  # Retrieve package from upstream mirrors and cache for future requests
  location @pkg_mirror {
    proxy_store         on;
    proxy_redirect      off;
    proxy_store_access  user:rw group:rw all:r;
    proxy_next_upstream error timeout http_404;
    proxy_pass          http://mirrors_{{ mirror.type }}$request_uri;
  }
}

# Upstream Arch Linux Mirrors
# - Configure as many backend mirrors as you want in the blocks below
# - Servers are used in a round-robin fashion by nginx
# - Add "backup" if you want to only use the mirror upon failure of the other mirrors
# - Use separate mirror server blocks to be able to use mirrors that have different paths to the package repos

upstream mirrors_{{ mirror.type }} {
{% for s in mirror.servers %}
  server 127.0.0.1:{{ mirror.port + loop.index }} {% if loop.index > 1 %}backup{% endif %};
{% endfor %}
}

# If you want to use an official mirror from /etc/pacman.d/mirrorlist like
# http://mirror.domain.example/path/to/repo/$repo/os/$arch
#
# the proxy_pass directive should look like this
# proxy_pass http://mirror.domain.example/path/to/repo$request_uri;
#
# Notice that $request_uri replaces the /$repo/os/$arch part of
# the mirror address. See more examples below.

{% for s in mirror.servers %}
server {
  listen 127.0.0.1:{{ mirror.port + loop.index }};
  # nginx may need to resolve domain names at run time
  # use only IPv4 addresses
  resolver 1.1.1.1 ipv6=off;

  location / {
    proxy_pass {{ s }}$request_uri;
  }
}
{% endfor %}
